(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unknown)
(declare-fun inv_main12 (Int Int) Bool)
(declare-fun inv_main29 (Int Int) Bool)
(declare-fun inv_main37 (Int Int) Bool)
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (and (<= 0 (+ var2 (- 1))) (= (+ var2 (- 1)) var0)) (= 0 var1))) (inv_main12 var0 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (inv_main12 var2 var0) (and (not (= var0 var2)) (= (+ var0 1) var1)))) (inv_main12 var2 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main12 var3 var0) (and (and (not (= var2 0)) (not (= var0 var3))) (= (+ var0 1) var1)))) (inv_main29 var3 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (inv_main29 var2 var0) (and (not (= var1 0)) (not (= var0 var2))))) (inv_main37 var2 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main29 var3 var0) (and (and (and (and (not (= (+ var0 1) var3)) (not (= var2 0))) (not (= var1 0))) (not (= var0 var3))) (= (+ var0 1) var4)))) (inv_main37 var3 var4))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and (inv_main29 var1 var0) (not (= var0 var1)))) (inv_main37 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (inv_main37 var1 var0) (= (+ var0 1) var2))) (inv_main29 var1 var2))))
(assert (forall ((var0 Int)) (not (and (inv_main12 var0 var0) (not (<= 0 var0))))))
(assert (forall ((var0 Int) (var1 Int)) (not (and (inv_main12 var1 var0) (and (not (<= 0 var0)) (not (= var0 var1)))))))
(assert (forall ((var0 Int) (var1 Int)) (not (and (inv_main12 var1 var0) (and (not (<= 0 (+ var1 (* (- 1) var0)))) (not (= var0 var1)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (not (and (inv_main12 var2 var0) (and (not (<= 0 var0)) (not (or (= var1 0) (= var0 var2))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (not (and (inv_main12 var2 var0) (and (not (<= 0 (+ var2 (* (- 1) var0)))) (not (or (= var1 0) (= var0 var2))))))))
(assert (forall ((var0 Int)) (not (and (inv_main29 var0 var0) (not (<= 0 var0))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (not (and (inv_main29 var3 var0) (and (not (<= 0 var0)) (not (or (= var1 0) (or (= var2 0) (= var0 var3)))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (not (and (inv_main29 var2 var0) (and (not (<= 0 (+ var2 (* (- 1) var0)))) (not (or (= var1 0) (or (= var3 0) (= var0 var2)))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (not (and (inv_main29 (+ var2 1) var2) (and (and (and (not (<= 0 (+ var2 1))) (not (= var1 0))) (not (= var0 0))) (not (= var2 (+ var2 1))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (not (and (inv_main29 (+ var1 1) var1) (and (and (and (not (<= 0 (+ (+ var1 1) (* (- 1) (+ var1 1))))) (not (= var2 0))) (not (= var0 0))) (not (= var1 (+ var1 1))))))))
(assert (forall ((var0 Int) (var1 Int)) (not (and (inv_main37 var1 var0) (not (<= 0 var0))))))
(assert (forall ((var0 Int) (var1 Int)) (not (and (inv_main37 var1 var0) (not (<= 0 (+ var1 (* (- 1) var0))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (not (and (inv_main29 var1 var0) (and (not (<= 0 var0)) (and (not (= var2 0)) (not (= var0 var1))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (not (and (inv_main29 var1 var0) (and (not (<= 0 (+ var1 (* (- 1) var0)))) (and (not (= var2 0)) (not (= var0 var1))))))))
(check-sat)
