(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unknown)
(declare-fun inv_main6 (Int Int Int Int Int) Bool)
(declare-fun inv_main7 (Int Int Int Int) Bool)
(declare-fun inv_main8 (Int Int Int Int) Bool)
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main7 var2 var3 var5 var1) (and (and (not (<= 0 (+ var5 (- 1)))) (= var0 var3)) (= var4 0)))) (inv_main6 var2 var3 var0 var1 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main8 var2 var3 var5 var1) (and (and (not (<= 0 (+ var5 (- 1)))) (= var0 var3)) (= var4 0)))) (inv_main6 var2 var3 var0 var1 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main7 var2 var3 var4 var0) (and (and (<= 0 (+ var4 (- 1))) (= (+ var4 (- 1)) var1)) (= (+ var0 1) var5)))) (inv_main7 var2 var3 var1 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main8 var2 var3 var4 var0) (and (and (<= 0 (+ var4 (- 1))) (= (+ var4 (- 1)) var5)) (= (+ var0 (- 1)) var1)))) (inv_main8 var2 var3 var5 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int)) (or (not (and (inv_main6 var3 var4 var1 var2 var5) (and (and (and (<= 0 (+ var3 (- 1))) (<= 0 (+ var1 (- 1)))) (= (+ var1 (- 1)) var0)) (= (+ var5 1) var6)))) (inv_main6 var3 var4 var0 var2 var6))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int)) (or (not (and (inv_main6 var4 var5 var0 var1 var6) (and (and (and (not (<= 0 (+ var4 (- 1)))) (<= 0 (+ var0 (- 1)))) (= (+ var0 (- 1)) var3)) (= (+ var6 (- 1)) var2)))) (inv_main6 var4 var5 var3 var1 var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (and (<= 0 (+ var1 (- 1))) (= var0 var2)) (= 0 var3))) (inv_main7 var1 var2 var0 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (and (not (<= 0 (+ var1 (- 1)))) (= var0 var2)) (= 0 var3))) (inv_main8 var1 var2 var0 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (not (and (inv_main7 var1 var2 var3 var0) (and (and (not (<= 0 (* (- 1) var2))) (not (= var0 var2))) (not (<= 0 (+ var3 (- 1)))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (not (and (inv_main8 var1 var2 var3 var0) (and (and (not (<= 0 (* (- 1) var2))) (not (= (+ var0 (* 1 var2)) 0))) (not (<= 0 (+ var3 (- 1)))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (not (and (inv_main6 var2 var3 var0 var1 var3) (and (and (<= 0 (* (- 1) var0)) (<= 0 (* (- 1) var2))) (<= 0 (+ (- 1) var3)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (not (and (inv_main6 var2 var3 var0 var1 var4) (and (= (+ var4 var3) 0) (and (and (<= 0 (* (- 1) var0)) (<= 0 (+ (- 1) var2))) (<= 0 (+ (- 1) var3))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (not (and (inv_main6 var2 var3 var0 var1 var4) (and (and (not (= var4 var3)) (not (= (+ var4 var3) 0))) (and (<= 0 (* (- 1) var0)) (<= 0 (+ (- 1) var3))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (not (and (inv_main6 var2 var3 var0 var1 var4) (and (not (= var1 var4)) (not (<= 0 (+ var0 (- 1)))))))))
(check-sat)
