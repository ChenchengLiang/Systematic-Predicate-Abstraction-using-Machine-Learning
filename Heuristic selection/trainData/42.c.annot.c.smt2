(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unknown)
(declare-fun inv_main25 () Bool)
(declare-fun inv_main6 (Int Int Int Int) Bool)
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (and (and (not (= var0 0)) (= 0 var2)) (= 1 var1)) (= 1 var3))) (inv_main6 var0 var1 var3 var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (and (and (= var1 0) (= 1 var0)) (= 1 var2)) (= 1 var3))) (inv_main6 var1 var2 var3 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int)) (or (not (and (inv_main6 var4 (+ var1 (- 1)) (+ var3 (- 1)) var5) (and (and (and (and (<= 0 (+ (+ (+ var1 (- 1)) (+ var3 (- 1))) (- 1))) (= (+ (+ var1 (- 1)) (+ var3 (- 1))) (+ (* 2 var6) 1))) (not (= var4 0))) (not (= var2 0))) (= (+ (+ var1 (- 1)) (+ var3 (- 1))) var0)))) (inv_main6 var4 var1 var3 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (or (not (and (inv_main6 var3 (+ var2 (- 2)) var7 var6) (and (and (and (= (+ var4 (+ (* (- 1) var7) (* (- 1) var2))) (- 2)) (= (+ (* 2 var5) (+ (* (- 1) var7) (+ (* (- 1) var2) var0))) (- 2))) (and (and (not (= var1 0)) (not (= var3 0))) (not (= var0 (- 1))))) (and (<= 0 (* (- 1) var0)) (<= 0 (+ 1 var0)))))) (inv_main6 var3 var2 var7 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (or (not (and (inv_main6 var3 (+ var2 (- 2)) var7 var6) (and (and (and (= (+ var4 (+ (* (- 1) var7) (* (- 1) var2))) (- 2)) (= (+ (* 2 var5) (+ (* (- 1) var7) (+ (* (- 1) var2) var0))) (- 2))) (and (not (= var1 0)) (not (= var3 0)))) (and (and (<= 0 (+ 1 (+ (* (- 1) var7) (* (- 1) var2)))) (<= 0 (* (- 1) var0))) (<= 0 (+ 1 var0)))))) (inv_main6 var3 var2 var7 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int)) (or (not (and (inv_main6 0 var4 (+ var0 (- 2)) var5) (and (and (and (and (<= 0 (+ (+ (+ var4 (+ var0 (- 2))) 1) (- 1))) (= (+ (+ var4 (+ var0 (- 2))) 1) (+ (* 2 var2) 1))) (not (= var1 0))) (= (+ (+ var4 (+ var0 (- 2))) 1) var6)) (= var3 0)))) (inv_main6 var3 var4 var0 var6))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (or (not (and (inv_main6 0 (+ var1 (- 1)) (+ var7 (- 1)) var6) (and (and (and (and (and (and (= (+ var3 (+ (* (- 1) var7) (* (- 1) var1))) (- 1)) (= (+ (* 2 var5) (+ (* (- 1) var7) (+ (* (- 1) var1) var2))) (- 1))) (not (= var0 0))) (not (= var2 (- 1)))) (<= 0 (* (- 1) var2))) (<= 0 (+ 1 var2))) (= var4 0)))) (inv_main6 var4 var1 var7 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (or (not (and (inv_main6 0 (+ var1 (- 1)) (+ var7 (- 1)) var6) (and (and (and (and (and (and (= (+ var3 (+ (* (- 1) var7) (* (- 1) var1))) (- 1)) (= (+ (* 2 var5) (+ (* (- 1) var7) (+ (* (- 1) var1) var2))) (- 1))) (not (= var0 0))) (<= 0 (+ (* (- 1) var7) (* (- 1) var1)))) (<= 0 (* (- 1) var2))) (<= 0 (+ 1 var2))) (= var4 0)))) (inv_main6 var4 var1 var7 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main6 var2 var3 var5 (+ var0 (- 1))) (and (and (= (+ (* 2 var1) (+ (* (- 1) var0) var4)) 0) (and (not (= var2 0)) (not (= var4 (- 1))))) (and (<= 0 (* (- 1) var4)) (<= 0 (+ 1 var4)))))) inv_main25)))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main6 var2 var3 var5 (+ var0 (- 1))) (and (and (= (+ (* 2 var1) (+ (* (- 1) var0) var4)) 0) (not (= var2 0))) (and (and (<= 0 (+ (- 1) (* (- 1) var0))) (<= 0 (* (- 1) var4))) (<= 0 (+ 1 var4)))))) inv_main25)))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main6 0 var0 var3 var2) (and (and (and (= (+ (* 2 var4) (+ (* (- 1) var2) var1)) 0) (not (= var1 (- 1)))) (<= 0 (* (- 1) var1))) (<= 0 (+ 1 var1))))) inv_main25)))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main6 0 var0 var3 var2) (and (and (and (= (+ (* 2 var4) (+ (* (- 1) var2) var1)) 0) (<= 0 (+ (- 1) (* (- 1) var2)))) (<= 0 (* (- 1) var1))) (<= 0 (+ 1 var1))))) inv_main25)))
(assert (not inv_main25))
(check-sat)
