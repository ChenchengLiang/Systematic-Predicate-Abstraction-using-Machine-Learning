-------------
inv_main5(P2, P1, P0) :- 10 = P0 & 0 = P1.
Head arguments: ListBuffer((P2,P2), (P1,P1), (P0,P0))
Body arguments: ListBuffer()
Common Arguments:ListBuffer()
relativeComplimentOfHeadArg:ListBuffer((P2,P2), (P1,P1), (P0,P0))
relativeComplimentOfBodyArg:ListBuffer()
List(P2, P1, P0)
List()
((10 = P0) & (0 = P1))
variables in guard: ListBuffer()
Data flow:
P1 <- 0
P0 <- 10
Guard:
dataflow number:2
guard number:0
-------------
inv_main6(P0, P2, P1) :- inv_main5(P0, P2, P1), 10 < P2.
Head arguments: ListBuffer((P0,P0), (P2,P2), (P1,P1))
Body arguments: ListBuffer((P0,P0), (P2,P2), (P1,P1))
Common Arguments:ListBuffer((P0,P0), (P2,P2), (P1,P1))
relativeComplimentOfHeadArg:ListBuffer()
relativeComplimentOfBodyArg:ListBuffer()
List(P0, P2, P1)
List(inv_main5(P0, P2, P1))
!((10 + -1 * P2) >= 0)
variables in guard: ListBuffer(-1, P2)
Data flow:
P0<-P0
P2<-P2
P1<-P1
Guard:
!((10 + -1 * P2) >= 0)
dataflow number:0
guard number:1
-------------
inv_main11(P2, P1) :- inv_main6(P0, P2, P1), P1 < 0.
Head arguments: ListBuffer((P2,P2), (P1,P1))
Body arguments: ListBuffer((P0,P0), (P2,P2), (P1,P1))
Common Arguments:ListBuffer((P2,P2), (P1,P1))
relativeComplimentOfHeadArg:ListBuffer()
relativeComplimentOfBodyArg:ListBuffer((P0,P0))
Vector(P2, P1)
List(inv_main6(P0, P2, P1))
!(P1 >= 0)
variables in guard: ListBuffer(P1)
Data flow:
P2<-P2
P1<-P1
Guard:
!(P1 >= 0)
dataflow number:0
guard number:1
-------------
inv_main6(P0, P2, P1) :- inv_main5(P0, P0, P1), 10 >= P0 & P2 = P0.
Head arguments: ListBuffer((P0,P0), (P2,P2), (P1,P1))
Body arguments: ListBuffer((P0,P0), (P0,P0), (P1,P1))
Common Arguments:ListBuffer((P0,P0), (P1,P1))
relativeComplimentOfHeadArg:ListBuffer((P2,P2))
relativeComplimentOfBodyArg:ListBuffer()
List(P0, P2, P1)
List(inv_main5(P0, P0, P1))
(((10 + -1 * P0) >= 0) & (P2 = P0))
variables in guard: ListBuffer(-1, P0)
Data flow:
P2 <- P0
P1<-P1
Guard:
((10 + -1 * P0) >= 0)
dataflow number:1
guard number:1
-------------
inv_main5(P0, P3, P1) :- inv_main5(P0, P3 - 1, P1), 10 >= P3 - 1 & P3 - 1 != P0.
Head arguments: ListBuffer((P0,P0), (P3,P3), (P1,P1))
Body arguments: ListBuffer((P0,P0), ((P3 + -1),(P3 + -1)), (P1,P1))
Common Arguments:ListBuffer((P0,P0), (P1,P1))
relativeComplimentOfHeadArg:ListBuffer((P3,P3))
relativeComplimentOfBodyArg:ListBuffer(((P3 + -1),(P3 + -1)))
List(P0, P3, P1)
List(inv_main5(P0, (P3 + -1), P1))
(((10 + -1 * (P3 + -1)) >= 0) & !((P3 + -1) = P0))
variables in guard: ListBuffer(-1, P3)
Data flow:
P3 <- _P3
P3<-(P3 + -1)
P0<-P0
P1<-P1
Guard:
((11 + -1 * _P3) >= 0)
!((-1 + _P3) = P0)
dataflow number:1
guard number:2
-------------
inv_main11(P2, P1) :- inv_main6(P0, P2, P1), !(P1 != 10 - P0 | P1 < 0).
Head arguments: ListBuffer((P2,P2), (P1,P1))
Body arguments: ListBuffer((P0,P0), (P2,P2), (P1,P1))
Common Arguments:ListBuffer((P2,P2), (P1,P1))
relativeComplimentOfHeadArg:ListBuffer()
relativeComplimentOfBodyArg:ListBuffer((P0,P0))
Vector(P2, P1)
List(inv_main6(P0, P2, P1))
!(!(P1 = (10 + -1 * P0)) | !(P1 >= 0))
variables in guard: ListBuffer(P1)
Data flow:
P2<-P2
P1<-P1
Guard:
!(!(P1 = (10 + -1 * P0)) | !(P1 >= 0))
dataflow number:0
guard number:1
-------------
inv_main6(P0, P2, P3) :- inv_main6(P0, P2, P3 + 1), P3 + 1 != 10 - P0 & P3 >= -1.
Head arguments: ListBuffer((P0,P0), (P2,P2), (P3,P3))
Body arguments: ListBuffer((P0,P0), (P2,P2), ((P3 + 1),(P3 + 1)))
Common Arguments:ListBuffer((P0,P0), (P2,P2))
relativeComplimentOfHeadArg:ListBuffer((P3,P3))
relativeComplimentOfBodyArg:ListBuffer(((P3 + 1),(P3 + 1)))
List(P0, P2, P3)
List(inv_main6(P0, P2, (P3 + 1)))
(!((P3 + 1) = (10 + -1 * P0)) & ((P3 + 1) >= 0))
variables in guard: ListBuffer(P3)
Data flow:
P3 <- _P3
P3<-(P3 + 1)
P0<-P0
P2<-P2
Guard:
!((1 + _P3) = (10 + -1 * P0))
((1 + _P3) >= 0)
dataflow number:1
guard number:2
-------------
false :- inv_main11(P2, P1), P2 != 10 - P1.
Head arguments: ListBuffer()
Body arguments: ListBuffer((P2,P2), (P1,P1))
Common Arguments:ListBuffer()
relativeComplimentOfHeadArg:ListBuffer()
relativeComplimentOfBodyArg:ListBuffer((P2,P2), (P1,P1))
List()
List(inv_main11(P2, P1))
!(P2 = (10 + -1 * P1))
variables in guard: ListBuffer()
Data flow:
Guard:
!(P2 = (10 + -1 * P1))
dataflow number:0
guard number:1
Hints:
-----------
