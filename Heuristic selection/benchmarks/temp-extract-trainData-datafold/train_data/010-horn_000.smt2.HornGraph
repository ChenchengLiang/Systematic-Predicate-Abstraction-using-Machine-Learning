-------------
INV1(P12, P11, P10, P8, P7, P6) :- INV1(P12, P11, P10, P8 + 1, P3, P7), P3 + P7 = P5 & P12 < 1 & P8 + 1 >= 1 & P3 + P7 = P6.
Head arguments: ListBuffer((P12,P12), (P11,P11), (P10,P10), (P8,P8), (P7,P7), (P6,P6))
Body arguments: ListBuffer((P12,P12), (P11,P11), (P10,P10), ((P8 + 1),(P8 + 1)), (P3,P3), (P7,P7))
Common Arguments:ListBuffer((P12,P12), (P11,P11), (P10,P10), (P7,P7))
relativeComplimentOfHeadArg:ListBuffer((P8,P8), (P6,P6))
relativeComplimentOfBodyArg:ListBuffer(((P8 + 1),(P8 + 1)), (P3,P3))
Vector(P12, P11, P10, P8, P7, P6)
List(INV1(P12, P11, P10, (P8 + 1), P3, P7))
(((((P3 + P7) = P5) & !((P12 + -1) >= 0)) & (((P8 + 1) + -1) >= 0)) & ((P3 + P7) = P6))
variables in guard: ListBuffer(P12, -1, P8)
Data flow:
P8 <- _P8
P6 <- (P3 + P7)
P8<-(P8 + 1)
P6<-P3
P12<-P12
P11<-P11
P10<-P10
P7<-P7
Guard:
((P3 + P7) = P5)
!((P12 + -1) >= 0)
(_P8 >= 0)
dataflow number:2
guard number:3
-------------
INV1(P15, P14, P13, P11, P10, P9) :- INV1(P15 + 1, P6, P14, P11 + 1, P4, P10), P4 + P10 = P8 & P15 + 1 >= 1 & P11 + 1 >= 1 & P6 + P14 = P12 & P6 + P14 = P13 & P4 + P10 = P9.
Head arguments: ListBuffer((P15,P15), (P14,P14), (P13,P13), (P11,P11), (P10,P10), (P9,P9))
Body arguments: ListBuffer(((P15 + 1),(P15 + 1)), (P6,P6), (P14,P14), ((P11 + 1),(P11 + 1)), (P4,P4), (P10,P10))
Common Arguments:ListBuffer((P14,P14), (P10,P10))
relativeComplimentOfHeadArg:ListBuffer((P15,P15), (P13,P13), (P11,P11), (P9,P9))
relativeComplimentOfBodyArg:ListBuffer(((P15 + 1),(P15 + 1)), (P6,P6), ((P11 + 1),(P11 + 1)), (P4,P4))
Vector(P15, P14, P13, P11, P10, P9)
List(INV1((P15 + 1), P6, P14, (P11 + 1), P4, P10))
(((((((P4 + P10) = P8) & (((P15 + 1) + -1) >= 0)) & (((P11 + 1) + -1) >= 0)) & ((P6 + P14) = P12)) & ((P6 + P14) = P13)) & ((P4 + P10) = P9))
variables in guard: ListBuffer(P15, -1, P11)
Data flow:
P15 <- _P15
P13 <- (P6 + P14)
P11 <- _P11
P9 <- (P4 + P10)
P15<-(P15 + 1)
P13<-P6
P11<-(P11 + 1)
P9<-P4
P14<-P14
P10<-P10
Guard:
((P4 + P10) = P8)
(_P15 >= 0)
(_P11 >= 0)
((P6 + P14) = P12)
dataflow number:4
guard number:4
-------------
INV1(P12, P11, P10, P8, P7, P6) :- INV1(P12 + 1, P3, P11, P8, P7, P6), P3 + P11 = P9 & P8 < 1 & P12 + 1 >= 1 & P3 + P11 = P10.
Head arguments: ListBuffer((P12,P12), (P11,P11), (P10,P10), (P8,P8), (P7,P7), (P6,P6))
Body arguments: ListBuffer(((P12 + 1),(P12 + 1)), (P3,P3), (P11,P11), (P8,P8), (P7,P7), (P6,P6))
Common Arguments:ListBuffer((P11,P11), (P8,P8), (P7,P7), (P6,P6))
relativeComplimentOfHeadArg:ListBuffer((P12,P12), (P10,P10))
relativeComplimentOfBodyArg:ListBuffer(((P12 + 1),(P12 + 1)), (P3,P3))
Vector(P12, P11, P10, P8, P7, P6)
List(INV1((P12 + 1), P3, P11, P8, P7, P6))
(((((P3 + P11) = P9) & !((P8 + -1) >= 0)) & (((P12 + 1) + -1) >= 0)) & ((P3 + P11) = P10))
variables in guard: ListBuffer(P8, -1, P12)
Data flow:
P12 <- _P12
P10 <- (P3 + P11)
P12<-(P12 + 1)
P10<-P3
P11<-P11
P8<-P8
P7<-P7
P6<-P6
Guard:
((P3 + P11) = P9)
!((P8 + -1) >= 0)
(_P12 >= 0)
dataflow number:2
guard number:3
-------------
INV1(P7, P6, P5, P3, P2, P1) :- P0 = 0 & P6 = 0 & P5 = 1 & P4 = 0 & P3 = P7 - 1 & P2 = 1 & P1 = 1.
Head arguments: ListBuffer((P7,P7), (P6,P6), (P5,P5), (P3,P3), (P2,P2), (P1,P1))
Body arguments: ListBuffer()
Common Arguments:ListBuffer()
relativeComplimentOfHeadArg:ListBuffer((P7,P7), (P6,P6), (P5,P5), (P3,P3), (P2,P2), (P1,P1))
relativeComplimentOfBodyArg:ListBuffer()
Vector(P7, P6, P5, P3, P2, P1)
List()
(((((((P0 = 0) & (P6 = 0)) & (P5 = 1)) & (P4 = 0)) & (P3 = (-1 + P7))) & (P2 = 1)) & (P1 = 1))
variables in guard: ListBuffer()
Data flow:
P7 <- _P7
P6 <- 0
P5 <- 1
P3 <- _P3
P2 <- 1
P1 <- 1
Guard:
(P0 = 0)
(P4 = 0)
(_P3 = (-1 + _P7))
dataflow number:6
guard number:3
-------------
false :- INV1(P7, P5, P9, P6, P3, P8), P7 < 1 & P6 < 1 & P9 != P8.
Head arguments: ListBuffer()
Body arguments: ListBuffer((P7,P7), (P5,P5), (P9,P9), (P6,P6), (P3,P3), (P8,P8))
Common Arguments:ListBuffer()
relativeComplimentOfHeadArg:ListBuffer()
relativeComplimentOfBodyArg:ListBuffer((P7,P7), (P5,P5), (P9,P9), (P6,P6), (P3,P3), (P8,P8))
List()
List(INV1(P7, P5, P9, P6, P3, P8))
((!((P7 + -1) >= 0) & !((P6 + -1) >= 0)) & !(P9 = P8))
variables in guard: ListBuffer(P7, -1, P6)
Data flow:
Guard:
!((P7 + -1) >= 0)
!((P6 + -1) >= 0)
!(P9 = P8)
dataflow number:0
guard number:3
Hints:
-----------
